---

import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Inicio', href: '/' },
	{ label: 'Servicios', href: '/servicios/' },
	{ label: 'Contacto', href: '/contacto/' },
];

const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths; target?: string }[] = [
	{ label: 'GitHub', href: 'https://github.com/Superteoh/Web_ejercicio.git', icon: 'github-logo',target: '_blank' },
];

---

<!-- Enlace al archivo CSS de Tailwind -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<!-- ruta a los estilos globales de css -->
<link rel="stylesheet" href="src/styles//global.css">


<nav class="bg-white">
	<div class="menu-header flex justify-between items-center px-24 py-2">
        <a href="/" class="flex items-center">
            <img src="assets/svg/logobig.webp" alt="Logo" class="h-10 w-auto"> 
			
        </a>
		<div class="flex items-center gap-4">
            {iconLinks.map(({ label, href, icon, target }) => (
                <a href={href} target={target} class="nav-items">
                    <Icon icon={icon} />
                </a>
            ))}
            <div class="theme-toggle">
                <ThemeToggle />
            </div>
        </div>
	</div>

    <noscript>
		<menu-button>
            <template>
                <button class="menu-button" aria-expanded="false">
                    <span class="sr-only">Menu</span>
                    <Icon icon="list" />
                </button>
            </template>
        </menu-button>
	</noscript>
    <ul class="nav-items">
        {
            textLinks.map(({ label, href }) => (
                <li>
                    <a
                        aria-current={Astro.url.pathname === href}
                        class:list={[
                            'link',
                            {
                                active:
                                    Astro.url.pathname === href ||
                                    (href !== '/' && Astro.url.pathname.startsWith(href)),
                            },
							
                        ]}
                        href={href}
						class="nav-items"
                    >
                        {label}
                    </a>
                </li>
            ))
        }
    </ul>
    <noscript>...</noscript>
    <div id="menu-content" hidden>
        <ul class="nav-items">
          
        
    </div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

</body>
</html>

<style>
	nav {
		z-index: 999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 1300;
		margin-bottom: 5.5rem;
		
		
	}
    .menu-header {
		display: flex;
		ustify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
		
	}
	.theme-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 30;
		border-radius: 9999rem;
		padding: 1.5rem;
		font-size: 3.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 50%);
		box-shadow: var(--shadow-md);
	}

	.menu-button[aria-expanded='true'] {
		color: var(--gray-0);
		background: linear-gradient(180deg, var(--gray-600), transparent),
			radial-gradient(var(--gray-900), var(--gray-800) 150%);
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		background: var(--gradient-stroke);
		border-radius: 9999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
        display: flex;
        justify-content: center;
        margin: 0 auto; 
        padding: 1rem 0em 1rem;
		transition: transform 0.99s ease;
    }

    .nav-items li {
        margin: 0 1rem; 
        position: relative; 
    }
	.nav-items li a {
    position: relative;
    text-decoration: none;
    color: var(--gray-300); 
    transition: transform 0.5s ease; 
}
	.nav-items li a:hover {
		transform: translateY(-6px); 
		color: var(--gray-400); 
		text-decoration: underline;
	}
	
</style>
